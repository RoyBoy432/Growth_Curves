esize.min$sem[2] <- sem(evo.reps$mean.diam[1:4])
esize.min$mean.v<-mean(evo.reps$mean.vol[1:4])
esize.min$sem.v<-sem(evo.reps$mean.vol[1:4])
esize.min
evo.reps
size.raw <-read.csv("~\\..\\GitHub\\MinimalCell\\data\\SEM_Stein_data\\SEM_Stein_cases.csv")
size.raw <- as_tibble(size.raw)
colnames(size.raw) <- c("strain", "timepoint", "sub.strain", "diameter")
#colnames(size.raw_no.mutant) <- c("strain", "timepoint", "sub.strain", "diameter")
size.raw<-mutate(size.raw, volume = 4/3*pi*(diameter/2)^3)
size <- size.raw %>% group_by(strain, timepoint) %>% summarise(mean = mean(diameter), sem = sem(diameter), mean.v=mean(volume),sem.v=sem(volume))
size$strain <- as.factor(size$strain)
size$timepoint <- as.factor(size$timepoint)
fsize<-size %>% filter(timepoint!="Evolved")
esize<-size %>% filter(timepoint!="Mutant")
# Add x-values for plotting
time.x <- c(1,3,1,3)
fsize <- data.frame(fsize, time.x)
esize <- data.frame(esize, time.x)
# Subset relative fitness by strain
# Note, this code generates the SEM for evolved lines incorrectly. It pools the SEM across all measured individual cells, rather than taking the SEM of the 4 evolutionary replicates. In the code to generate the figure, I altered the size.wt and size.min dataframes to have the correct SEMs for plotting.
esize.wt  <- filter(esize, strain == "Non-minimal") %>%
dplyr::select(timepoint, mean, sem, time.x)
fsize.wt  <- filter(esize, strain == "Non-minimal") %>%
dplyr::select(timepoint, mean, sem, time.x)
esize.min  <- filter(esize, strain== "Minimal") %>%
dplyr::select(timepoint, mean, sem, time.x)
fsize.min  <- filter(fsize, strain== "Minimal") %>%
dplyr::select(timepoint, mean, sem, time.x)
size.reps <- size.raw %>%
dplyr::select(strain, timepoint, sub.strain, diameter, volume) %>%
group_by(timepoint, strain, sub.strain) %>%
summarize(mean.diam = mean(diameter),mean.vol=mean(volume))
s1_anc.reps <- filter(size.raw, sub.strain == "s1_anc")
B_anc.reps <- filter(size.raw, sub.strain == "B_anc")
equal.var.anc <- var.test(s1_anc.reps$diameter, B_anc.reps$diameter)
anc.t.test <- t.test(x = s1_anc.reps$diameter, B_anc.reps$diameter, alternative = "two.sided", var.equal = TRUE, mu = 0)
# Difference in cell size between wt and minimal at ancestor timepoint?
# Test for equal variance: p-value = 0.2658 --> homogeneous variance
# Results: t = 7.2946, df = 61, p-value = 2.322EE-11
#Non-minimal mean diameter: 439 nm. Minimal mean diameter: 305 nm
s1_ftsZ.reps <- filter(size.raw, sub.strain == "s1_ftsZ")
B_ftsZ.reps <- filter(size.raw, sub.strain == "B_ftsZ")
equal.var.s1.ftsZ <- var.test(s1_anc.reps$diameter, s1_ftsZ.reps$diameter)
s1.ftsZ.t.test <- t.test(x = s1_anc.reps$diameter, s1_ftsZ.reps$diameter, alternative = "two.sided", var.equal = TRUE, mu = 0)
# Difference in cell size between wt and wt ftsZ mutant?
# Test for equal variance: P = p-value = 0.2274 --> homogeneous variance
# Results: t = -5.5553, df = 118, p-value = 1.741EE-07
#Non-minimal mean diameter: 439 nm. Non-minimal ftsZ mutant mean diameter: 550 nm
equal.var.B.ftsZ <- var.test(B_anc.reps$diameter, B_ftsZ.reps$diameter)
B.ftsZ.t.test <- t.test(x = B_anc.reps$diameter, B_ftsZ.reps$diameter, alternative = "two.sided", var.equal = FALSE, mu = 0)
# Difference in cell size between minimal and minimal ftsZ mutant?
# Test for equal variance: p-value = 0.01685 --> non-homogeneous variance
# Results: t = 3.2865, df = 122.14, p-value = 0.001325
#minimal mean diameter: 305 nm. Minimal ftsZ mutant mean diameter: 247 nm
evo.reps <- filter(size.reps, timepoint == "Evolved") %>%
group_by(strain, sub.strain)
equal.var.evo <- var.test(evo.reps$mean.diam[1:4], evo.reps$mean.diam[5:8])
evo.t.test <- t.test(evo.reps$mean.diam ~ evo.reps$strain, var.equal = T)
# Difference in cell size between wt and minimal at evolved timepoint?
# Test for equal variance: p-value = 0.05954 --> homogeneous variance
# Results: t = -3.1494, df = 6, p-value = 0.01983
# mean of minimal: 375 nm. Mean of wt: 792 nm
# Difference in cell size between Non-minimal ancestor and Non-minimal evolved lines?
s1_delta.t.test <- t.test(x = evo.reps$mean.diam[5:8], mu = size.reps$mean.diam[2], alternative = 'two.sided')
# Answer = Yes, marginally: t = 2.7619, df = 3, p-value = 0.07004
# Non-minimal ancestor is 439 nm, Non-minimal evolved are 792 nm on average
# Difference in cell size between minimal ancestor and minimal evolved lines?
B_delta.t.test <- t.test(x = evo.reps$mean.diam[1:4], mu = size.reps$mean.diam[1], alternative = 't')
# Answer = No: t = 2.0305, df = 3, p-value = 0.1353
# Minimal ancestor is 305 nm, minimal evolved is 375 nm on average)
esize.wt$mean[2] <- mean(evo.reps$mean.diam[5:8])
esize.wt$sem[2] <- sem(evo.reps$mean.diam[5:8])
esize.wt$mean.v[2]<-mean(evo.reps$mean.vol[5:8])
esize.wt$sem.v[2]<-sem(evo.reps$mean.vol[5:8])
esize.min$mean[2] <- mean(evo.reps$mean.diam[1:4])
esize.min$sem[2] <- sem(evo.reps$mean.diam[1:4])
esize.min$mean.v[2]<-mean(evo.reps$mean.vol[1:4])
esize.min$sem.v[2]<-sem(evo.reps$mean.vol[1:4])
esize.min
size.raw <-read.csv("~\\..\\GitHub\\MinimalCell\\data\\SEM_Stein_data\\SEM_Stein_cases.csv")
size.raw <- as_tibble(size.raw)
colnames(size.raw) <- c("strain", "timepoint", "sub.strain", "diameter")
#colnames(size.raw_no.mutant) <- c("strain", "timepoint", "sub.strain", "diameter")
size.raw<-mutate(size.raw, volume = 4/3*pi*(diameter/2)^3)
size <- size.raw %>% group_by(strain, timepoint) %>% summarise(mean = mean(diameter), sem = sem(diameter), mean.v=mean(volume),sem.v=sem(volume))
size$strain <- as.factor(size$strain)
size$timepoint <- as.factor(size$timepoint)
fsize<-size %>% filter(timepoint!="Evolved")
esize<-size %>% filter(timepoint!="Mutant")
# Add x-values for plotting
time.x <- c(1,3,1,3)
fsize <- data.frame(fsize, time.x)
esize <- data.frame(esize, time.x)
# Subset relative fitness by strain
# Note, this code generates the SEM for evolved lines incorrectly. It pools the SEM across all measured individual cells, rather than taking the SEM of the 4 evolutionary replicates. In the code to generate the figure, I altered the size.wt and size.min dataframes to have the correct SEMs for plotting.
esize.wt  <- filter(esize, strain == "Non-minimal") %>%
dplyr::select(timepoint, mean, sem, time.x)
fsize.wt  <- filter(esize, strain == "Non-minimal") %>%
dplyr::select(timepoint, mean, sem, time.x)
esize.min  <- filter(esize, strain== "Minimal") %>%
dplyr::select(timepoint, mean, sem, time.x)
fsize.min  <- filter(fsize, strain== "Minimal") %>%
dplyr::select(timepoint, mean, sem, time.x)
esize
colnames(size.raw_no.mutant) <- c("strain", "timepoint", "sub.strain", "diameter")
size.reps <- size.raw %>%
dplyr::select(strain, timepoint, sub.strain, diameter, volume) %>%
group_by(timepoint, strain, sub.strain) %>%
summarize(mean.diam = mean(diameter),mean.vol=mean(volume))
s1_anc.reps <- filter(size.raw, sub.strain == "s1_anc")
B_anc.reps <- filter(size.raw, sub.strain == "B_anc")
equal.var.anc <- var.test(s1_anc.reps$diameter, B_anc.reps$diameter)
anc.t.test <- t.test(x = s1_anc.reps$diameter, B_anc.reps$diameter, alternative = "two.sided", var.equal = TRUE, mu = 0)
# Difference in cell size between wt and minimal at ancestor timepoint?
# Test for equal variance: p-value = 0.2658 --> homogeneous variance
# Results: t = 7.2946, df = 61, p-value = 2.322EE-11
#Non-minimal mean diameter: 439 nm. Minimal mean diameter: 305 nm
s1_ftsZ.reps <- filter(size.raw, sub.strain == "s1_ftsZ")
B_ftsZ.reps <- filter(size.raw, sub.strain == "B_ftsZ")
equal.var.s1.ftsZ <- var.test(s1_anc.reps$diameter, s1_ftsZ.reps$diameter)
s1.ftsZ.t.test <- t.test(x = s1_anc.reps$diameter, s1_ftsZ.reps$diameter, alternative = "two.sided", var.equal = TRUE, mu = 0)
# Difference in cell size between wt and wt ftsZ mutant?
# Test for equal variance: P = p-value = 0.2274 --> homogeneous variance
# Results: t = -5.5553, df = 118, p-value = 1.741EE-07
#Non-minimal mean diameter: 439 nm. Non-minimal ftsZ mutant mean diameter: 550 nm
equal.var.B.ftsZ <- var.test(B_anc.reps$diameter, B_ftsZ.reps$diameter)
B.ftsZ.t.test <- t.test(x = B_anc.reps$diameter, B_ftsZ.reps$diameter, alternative = "two.sided", var.equal = FALSE, mu = 0)
# Difference in cell size between minimal and minimal ftsZ mutant?
# Test for equal variance: p-value = 0.01685 --> non-homogeneous variance
# Results: t = 3.2865, df = 122.14, p-value = 0.001325
#minimal mean diameter: 305 nm. Minimal ftsZ mutant mean diameter: 247 nm
evo.reps <- filter(size.reps, timepoint == "Evolved") %>%
group_by(strain, sub.strain)
equal.var.evo <- var.test(evo.reps$mean.diam[1:4], evo.reps$mean.diam[5:8])
evo.t.test <- t.test(evo.reps$mean.diam ~ evo.reps$strain, var.equal = T)
# Difference in cell size between wt and minimal at evolved timepoint?
# Test for equal variance: p-value = 0.05954 --> homogeneous variance
# Results: t = -3.1494, df = 6, p-value = 0.01983
# mean of minimal: 375 nm. Mean of wt: 792 nm
# Difference in cell size between Non-minimal ancestor and Non-minimal evolved lines?
s1_delta.t.test <- t.test(x = evo.reps$mean.diam[5:8], mu = size.reps$mean.diam[2], alternative = 'two.sided')
# Answer = Yes, marginally: t = 2.7619, df = 3, p-value = 0.07004
# Non-minimal ancestor is 439 nm, Non-minimal evolved are 792 nm on average
# Difference in cell size between minimal ancestor and minimal evolved lines?
B_delta.t.test <- t.test(x = evo.reps$mean.diam[1:4], mu = size.reps$mean.diam[1], alternative = 't')
# Answer = No: t = 2.0305, df = 3, p-value = 0.1353
# Minimal ancestor is 305 nm, minimal evolved is 375 nm on average)
esize.wt$mean[2] <- mean(evo.reps$mean.diam[5:8])
esize.wt$sem[2] <- sem(evo.reps$mean.diam[5:8])
esize.wt$mean.v[2]<-mean(evo.reps$mean.vol[5:8])
esize.wt$sem.v[2]<-sem(evo.reps$mean.vol[5:8])
esize.min$mean[2] <- mean(evo.reps$mean.diam[1:4])
esize.min$sem[2] <- sem(evo.reps$mean.diam[1:4])
esize.min$mean.v[2]<-mean(evo.reps$mean.vol[1:4])
esize.min$sem.v[2]<-sem(evo.reps$mean.vol[1:4])
esize.min
esize
esize.min
colnames(size.raw_no.mutant) <- c("strain", "timepoint", "sub.strain", "diameter")
size.raw <-read.csv("~\\..\\GitHub\\MinimalCell\\data\\SEM_Stein_data\\SEM_Stein_cases.csv")
size.raw <- as_tibble(size.raw)
colnames(size.raw) <- c("strain", "timepoint", "sub.strain", "diameter")
#colnames(size.raw_no.mutant) <- c("strain", "timepoint", "sub.strain", "diameter")
size.raw<-mutate(size.raw, volume = 4/3*pi*(diameter/2)^3)
size <- size.raw %>% group_by(strain, timepoint) %>% summarise(mean = mean(diameter), sem = sem(diameter), mean.v=mean(volume),sem.v=sem(volume))
size$strain <- as.factor(size$strain)
size$timepoint <- as.factor(size$timepoint)
fsize<-size %>% filter(timepoint!="Evolved")
esize<-size %>% filter(timepoint!="Mutant")
# Add x-values for plotting
time.x <- c(1,3,1,3)
fsize <- data.frame(fsize, time.x)
esize <- data.frame(esize, time.x)
# Subset relative fitness by strain
# Note, this code generates the SEM for evolved lines incorrectly. It pools the SEM across all measured individual cells, rather than taking the SEM of the 4 evolutionary replicates. In the code to generate the figure, I altered the size.wt and size.min dataframes to have the correct SEMs for plotting.
esize.wt  <- filter(esize, strain == "Non-minimal") %>%
dplyr::select(timepoint, mean, sem, mean.v,sem.v, time.x)
fsize.wt  <- filter(esize, strain == "Non-minimal") %>%
dplyr::select(timepoint, mean, sem, mean.v,sem.v,time.x)
esize.min  <- filter(esize, strain== "Minimal") %>%
dplyr::select(timepoint, mean, sem, mean.v,sem.v,time.x)
fsize.min  <- filter(fsize, strain== "Minimal") %>%
dplyr::select(timepoint, mean, sem, mean.v,sem.v,time.x)
esize.min
esize.wt
size.reps <- size.raw %>%
dplyr::select(strain, timepoint, sub.strain, diameter, volume) %>%
group_by(timepoint, strain, sub.strain) %>%
summarize(mean.diam = mean(diameter),mean.vol=mean(volume))
s1_anc.reps <- filter(size.raw, sub.strain == "s1_anc")
B_anc.reps <- filter(size.raw, sub.strain == "B_anc")
equal.var.anc <- var.test(s1_anc.reps$diameter, B_anc.reps$diameter)
anc.t.test <- t.test(x = s1_anc.reps$diameter, B_anc.reps$diameter, alternative = "two.sided", var.equal = TRUE, mu = 0)
# Difference in cell size between wt and minimal at ancestor timepoint?
# Test for equal variance: p-value = 0.2658 --> homogeneous variance
# Results: t = 7.2946, df = 61, p-value = 2.322EE-11
#Non-minimal mean diameter: 439 nm. Minimal mean diameter: 305 nm
s1_ftsZ.reps <- filter(size.raw, sub.strain == "s1_ftsZ")
B_ftsZ.reps <- filter(size.raw, sub.strain == "B_ftsZ")
equal.var.s1.ftsZ <- var.test(s1_anc.reps$diameter, s1_ftsZ.reps$diameter)
s1.ftsZ.t.test <- t.test(x = s1_anc.reps$diameter, s1_ftsZ.reps$diameter, alternative = "two.sided", var.equal = TRUE, mu = 0)
# Difference in cell size between wt and wt ftsZ mutant?
# Test for equal variance: P = p-value = 0.2274 --> homogeneous variance
# Results: t = -5.5553, df = 118, p-value = 1.741EE-07
#Non-minimal mean diameter: 439 nm. Non-minimal ftsZ mutant mean diameter: 550 nm
equal.var.B.ftsZ <- var.test(B_anc.reps$diameter, B_ftsZ.reps$diameter)
B.ftsZ.t.test <- t.test(x = B_anc.reps$diameter, B_ftsZ.reps$diameter, alternative = "two.sided", var.equal = FALSE, mu = 0)
# Difference in cell size between minimal and minimal ftsZ mutant?
# Test for equal variance: p-value = 0.01685 --> non-homogeneous variance
# Results: t = 3.2865, df = 122.14, p-value = 0.001325
#minimal mean diameter: 305 nm. Minimal ftsZ mutant mean diameter: 247 nm
evo.reps <- filter(size.reps, timepoint == "Evolved") %>%
group_by(strain, sub.strain)
equal.var.evo <- var.test(evo.reps$mean.diam[1:4], evo.reps$mean.diam[5:8])
evo.t.test <- t.test(evo.reps$mean.diam ~ evo.reps$strain, var.equal = T)
# Difference in cell size between wt and minimal at evolved timepoint?
# Test for equal variance: p-value = 0.05954 --> homogeneous variance
# Results: t = -3.1494, df = 6, p-value = 0.01983
# mean of minimal: 375 nm. Mean of wt: 792 nm
# Difference in cell size between Non-minimal ancestor and Non-minimal evolved lines?
s1_delta.t.test <- t.test(x = evo.reps$mean.diam[5:8], mu = size.reps$mean.diam[2], alternative = 'two.sided')
# Answer = Yes, marginally: t = 2.7619, df = 3, p-value = 0.07004
# Non-minimal ancestor is 439 nm, Non-minimal evolved are 792 nm on average
# Difference in cell size between minimal ancestor and minimal evolved lines?
B_delta.t.test <- t.test(x = evo.reps$mean.diam[1:4], mu = size.reps$mean.diam[1], alternative = 't')
# Answer = No: t = 2.0305, df = 3, p-value = 0.1353
# Minimal ancestor is 305 nm, minimal evolved is 375 nm on average)
esize.wt$mean[2] <- mean(evo.reps$mean.diam[5:8])
esize.wt$sem[2] <- sem(evo.reps$mean.diam[5:8])
esize.wt$mean.v[2]<-mean(evo.reps$mean.vol[5:8])
esize.wt$sem.v[2]<-sem(evo.reps$mean.vol[5:8])
esize.min$mean[2] <- mean(evo.reps$mean.diam[1:4])
esize.min$sem[2] <- sem(evo.reps$mean.diam[1:4])
esize.min$mean.v[2]<-mean(evo.reps$mean.vol[1:4])
esize.min$sem.v[2]<-sem(evo.reps$mean.vol[1:4])
esize.min
esize.wt
size.wt.ftsZ <- esize.wt
size.wt.ftsZ$timepoint <- as.character(size.wt.ftsZ$timepoint)
size.wt.ftsZ$timepoint[2] <- "ftsZ E315*"
size.wt.ftsZ$timepoint <- factor(size.wt.ftsZ$timepoint)
size.wt.ftsZ$mean[2] <- mean(s1_ftsZ.reps$diameter)
size.wt.ftsZ$sem[2] <- sem(s1_ftsZ.reps$diameter)
size.wt.ftsZ
s1_ftsZ.reps
size.wt.ftsZ <- esize.wt
size.wt.ftsZ$timepoint <- as.character(size.wt.ftsZ$timepoint)
size.wt.ftsZ$timepoint[2] <- "ftsZ E315*"
size.wt.ftsZ$timepoint <- factor(size.wt.ftsZ$timepoint)
size.wt.ftsZ$mean[2] <- mean(s1_ftsZ.reps$diameter)
size.wt.ftsZ$sem[2] <- sem(s1_ftsZ.reps$diameter)
size.wt.ftsZ$mean.v[2] <- mean(s1_ftsZ.reps$volume)
size.wt.ftsZ$sem.v[2] <- sem(s1_ftsZ.reps$volumne)
size.wt.ftsZ <- esize.wt
size.wt.ftsZ
size.wt.ftsZ$timepoint <- as.character(size.wt.ftsZ$timepoint)
size.wt.ftsZ$timepoint[2] <- "ftsZ E315*"
size.wt.ftsZ$timepoint <- factor(size.wt.ftsZ$timepoint)
size.wt.ftsZ$mean[2] <- mean(s1_ftsZ.reps$diameter)
size.wt.ftsZ$sem[2] <- sem(s1_ftsZ.reps$diameter)
size.wt.ftsZ$mean.v[2] <- mean(s1_ftsZ.reps$volume)
size.wt.ftsZ$sem.v[2] <- sem(s1_ftsZ.reps$volumne)
size.wt.ftsZ$sem.v[2] <- sem(s1_ftsZ.reps$volume)
size.min.ftsZ <- esize.min
size.min.ftsZ$timepoint <- as.character(size.min.ftsZ$timepoint)
size.min.ftsZ$timepoint[2] <- "ftsZ E315*"
size.min.ftsZ$timepoint <- factor(size.min.ftsZ$timepoint)
size.min.ftsZ$mean[2] <- mean(B_ftsZ.reps$diameter)
size.min.ftsZ$sem[2] <- sem(B_ftsZ.reps$diameter)
size.min.ftsZ$mean.v[2] <- mean(B_ftsZ.reps$volume)
size.min.ftsZ$sem.v[2] <- sem(B_ftsZ.reps$volume)
size.min.ftsZ
size.wt.ftsZ
require("png")
require("dplyr")
require("grid")
sem <- function(x) sqrt(var(x)/length(x))
# Load data
size.raw <-read.csv("data2/cases_microbeJ.csv")
size.raw <-read.csv("~\\..\\GitHub\\MinimalCell\\data2\\cases_microbeJ.csv")
#size.raw <-read.csv("~\\..\\GitHub\\MinimalCell\\data2\\cases_microbeJ.csv")
size.raw <- as_tibble(size.raw)
colnames(size.raw) <- c("strain", "timepoint", "sub.strain", "diameter", "area",
"volume", "pixels", "mean", "min", "max")
size <- size.raw %>% group_by(strain, timepoint) %>% summarise(mean = mean(diameter), sem = sem(diameter))
size$strain <- as.factor(size$strain)
size$timepoint <- as.factor(size$timepoint)
require("png")
require("dplyr")
require("grid")
sem <- function(x) sqrt(var(x)/length(x))
size.raw <-read.csv("~\\..\\GitHub\\MinimalCell\\data2\\cases_microbeJ.csv")
#size.raw <-read.csv("~\\..\\GitHub\\MinimalCell\\data2\\cases_microbeJ.csv")
size.raw <- as_tibble(size.raw)
colnames(size.raw) <- c("strain", "timepoint", "sub.strain", "diameter", "area",
"volume", "pixels", "mean", "min", "max")
size <- size.raw %>% group_by(strain, timepoint) %>% summarise(mean = mean(diameter), sem = sem(diameter))
size$strain <- as.factor(size$strain)
size$timepoint <- as.factor(size$timepoint)
# Add x-values for plotting
time.x <- c(1,3,1,3)
size <- data.frame(size, time.x)
# Subset relative fitness by strain
# Note, this code generates the mean and SEM for evolved lines incorrectly. It pools the mean and SEM across all measured individual cells, rather than taking the SEM of the 4 evolutionary replicates. In the code to generate the figure, I altered the size.wt and size.min dataframes to have the correct SEMs for plotting.
size.wt  <- filter(size, strain == "Non-minimal") %>%
dplyr::select(timepoint, mean, sem, time.x)
size.min  <- filter(size, strain== "Minimal") %>%
dplyr::select(timepoint, mean, sem, time.x)
size <- size.raw %>% group_by(strain, timepoint) %>% summarise(mean = mean(diameter), sem = sem(diameter),mean.v=mean(volume),sem.v=sem(volume))
size$strain <- as.factor(size$strain)
size$timepoint <- as.factor(size$timepoint)
# Add x-values for plotting
time.x <- c(1,3,1,3)
size <- data.frame(size, time.x)
# Subset relative fitness by strain
# Note, this code generates the mean and SEM for evolved lines incorrectly. It pools the mean and SEM across all measured individual cells, rather than taking the SEM of the 4 evolutionary replicates. In the code to generate the figure, I altered the size.wt and size.min dataframes to have the correct SEMs for plotting.
size.wt  <- filter(size, strain == "Non-minimal") %>%
dplyr::select(timepoint, mean, sem, time.x)
size.min  <- filter(size, strain== "Minimal") %>%
dplyr::select(timepoint, mean, sem, time.x)
size
# Add x-values for plotting
time.x <- c(1,3,1,3)
size <- data.frame(size, time.x)
# Subset relative fitness by strain
# Note, this code generates the mean and SEM for evolved lines incorrectly. It pools the mean and SEM across all measured individual cells, rather than taking the SEM of the 4 evolutionary replicates. In the code to generate the figure, I altered the size.wt and size.min dataframes to have the correct SEMs for plotting.
size.wt  <- filter(size, strain == "Non-minimal") %>%
dplyr::select(timepoint, mean, sem, mean.v,sem.v,time.x)
size.min  <- filter(size, strain== "Minimal") %>%
dplyr::select(timepoint, mean, sem, mean.v,sem.v,time.x)
# Subset data
size.reps <- size.raw %>%
dplyr::select(strain, timepoint, sub.strain, diameter,volume) %>%
group_by(timepoint, strain, sub.strain) %>%
summarize(mean.diam = mean(diameter),mean.vol=mean(volume))
s1_anc.reps <- filter(size.raw, sub.strain == "s1_anc")
B_anc.reps <- filter(size.raw, sub.strain == "B_anc")
equal.var.anc <- var.test(s1_anc.reps$diameter, B_anc.reps$diameter)
anc.t.test <- t.test(x = s1_anc.reps$diameter, B_anc.reps$diameter, alternative = "two.sided", var.equal = T, mu = 0)
evo.reps <- filter(size.reps, timepoint == "Evolved") %>%
group_by(strain, sub.strain)
equal.var.evo <- var.test(evo.reps$mean.diam[1:4], evo.reps$mean.diam[5:8])
evo.reps <- filter(size.reps, timepoint == "Evolved") %>%
group_by(strain, sub.strain)
equal.var.evo <- var.test(evo.reps$mean.diam[1:4], evo.reps$mean.diam[5:8])
evo.t.test <- t.test(evo.reps$mean.diam ~ evo.reps$strain, var.equal = T)
# Difference in cell size between Non-Minimal ancestor and Non-Minimal evolved lines?
s1_delta.t.test <- t.test(x = evo.reps$mean.diam[5:8], mu = size.reps$mean.diam[2], alternative = 't')
# Difference in cell size between minimal ancestor and minimal evolved lines?
B_delta.t.test <- t.test(x = evo.reps$mean.diam[1:4], mu = size.reps$mean.diam[1], alternative = 't')
evo.reps
size.wt
size.wt$mean[2] <- mean(evo.reps$mean.diam[5:8])
size.wt$sem[2] <- sem(evo.reps$mean.diam[5:8])
size.wt$mean.v[2] <- mean(evo.reps$mean.vol[5:8])
size.wt$sem.v[2] <- sem(evo.reps$mean.vol[5:8])
size.wt
size.min$mean[2] <- mean(evo.reps$mean.diam[1:4])
size.min$sem[2] <- sem(evo.reps$mean.diam[1:4])
size.min$mean.v[2] <- mean(evo.reps$mean.vol[1:4])
size.min$sem.v[2] <- sem(evo.reps$mean.vol[1:4])
size.min
################################################################################
#                                                                              #
#	Lennon Lab Growth Curve Analysis (with Synergy MX Plate Reader)              #
#   Parameter Estimate Code                                                    #
#                                                                              #
################################################################################
#                                                                              #
#	Written by: M. Muscarella                                                    #
#   Partially based on growthcurve_code.R Written by: M. Larsen (2013/07/18)   #
#                                                                              #
#	Last update: 02/27/2016 by V. Kuo and M. Muscarella                          #
#                                                                              #
################################################################################
growth.modGomp <- function(input=" ", output.name=" ",
output.dir="../output/",
temp.dir="../temp/",
intercept.guess=0.1,delta = 0.05,
synergy=T, temp = T, smooth = T, skip = ""){
# Input = Raw txt output file from Synergy MX
# Intercept.guess = initial guess of non-grid parameter for y intercept
# delta = minimum change in OD required for analysis
# synergy=T --> the data comes from the synergy mx machine.
#   If false data should be deliminated in proper format
# temp = T -> is there temperature data include for QC purposes
# Load Code Dependencies
source("../bin/read.synergy.R")
source("../bin/curve_fit_fxs.R")
source("../bin/grid.mle2.R")
# Create Directory For Output and Temp
dir.create(output.dir, showWarnings = FALSE)
dir.create(temp.dir, showWarnings = FALSE)
# Data Input
if (synergy == T){
data.in <- read.synergy(input, skip = skip)
samples <- colnames(data.in[3:dim(data.in)[2]])
} else {
data.in <- read.csv(input, header=T)
samples <- colnames(data.in[2:dim(data.in)[2]])
}
if (temp == T){
temp.test <- lm(round(Temp, 2) ~ Time, data=data.in)
p <- round(anova(temp.test)$'Pr(>F)'[1], 3)
temp.min <- min(data.in$Temp)
temp.max <- max(data.in$Temp)
temp.diff <- temp.max - temp.min
if (temp.diff < 3) {} else {stop("Stop, check for temperature effects")}
} else {}
# Initialize Data Storage
results <- matrix(NA,nrow=length(samples),ncol=10)
colnames(results) <- c("Curve","b0","A","umax","L","z",
"umax.lw","umax.up","umax.lw.FI","umax.up.FI")
results <- as.data.frame(results)
# Temporary Directory
# outfile <- paste(temp.dir,output,".csv", sep="")
# Creat Output Directory
outfile <- paste(output.dir,output.name,".csv", sep="")
titles <- c("Curve","b0","A","umax","L","z", "umax.lw","umax.up",
"umax.lw.FI","umax.up.FI")
write.table(as.matrix(t(titles)), file=outfile, append=F, row.names=F,
col.names=F, sep=",", quote=FALSE)
for(i in 1:length(samples)){
# Print Operation Status
print(paste("Starting sample ", samples[i], sep = ""), quote=F)
# Extract Data
t <- data.in$Time
s <- data.in[,which(colnames(data.in) == samples[i])]
if (max(s) - min(s) < delta) {
plot(s ~ t, main=samples[i], ylab="ABS", xlab="Time", pch=19)
print(paste("Observed change in OD is not greater than ", delta,
" in sample ", samples[i], sep=""), quote=F)
next
} else {
realdata <- data.frame(t,s)
}
# Smoothing Function
if (smooth == T){
s.2 <- as.numeric(filter(s, rep(1/11,11), circular=F, sides=2))
s.2[1:5] <- s[1:5]
s.2[(length(s.2)-5):length(s.2)] <- s[(length(s)-5):length(s)]
s.max <- max(which(s.2 == max(s.2, na.rm=T)))
t.end <- round(t[s.max],0) + 1
t.trim <- t[which(t <= t.end)]
s.trim <- s.2[which(t <= t.end)]
tmpdata <- data.frame(t.trim, s.trim)
} else {
s.2 <- as.numeric(s)
s.2[1:5] <- s[1:5]
s.2[(length(s.2)-5):length(s.2)] <- s[(length(s)-5):length(s)]
s.max <- max(which(s.2 == max(s.2, na.rm=T)))
t.end <- round(t[s.max],0) + 1
t.trim <- t[which(t <= t.end)]
s.trim <- s.2[which(t <= t.end)]
tmpdata <- data.frame(t.trim, s.trim)
}
# Set Grid and Start Lists for Model
# Modified Gompertz, dat~dnorm(mean=m.gomp(time2,c(b0,A,umax,L)),sd=exp(z))
grids1<-list(A=c(1.04, 2.4, 1.72),umax=c(0.005,0.006,0.008),L=c(-5,-0.5,0.1,5,10,20),z=c(-2,-0.5))
start1<-list(b0=intercept.guess,A=max(tmpdata[,2]),umax=NA,L=NA,z=NA)
# Perform grid.mle2 Fits
fit1<-grid.mle2(minuslogl=s.trim~dnorm(mean=m.gomp(t.trim,c(b0,A,umax,L)),
sd=exp(z)),grids=grids1,start=start1,data=tmpdata,
method="BFGS")
print("finished fit", quote=F)
# isolate best of each class of model
best.f1<-fit1$res.mod[[which(fit1$res.mat[,'AIC']==min(fit1$res.mat[,'AIC']))[1]]]
# generate plot of model fits
plot(s ~ t, main=samples[i], ylab="ABS", xlab="Time", pch=19, data=realdata)
curve(m.gomp(x,coef(best.f1)[1:4]),0,max(realdata$t),col='blue',lwd=2,add=T)
pdf(file=paste(temp.dir,"testplot",samples[i],".pdf",sep=""))
par(mar = c(6, 6, 4, 2))
plot(s ~ t, main=samples[i],
ylab=expression(paste("Absorbance"[600])),
xlab=expression(paste("Time (min)")),
pch=19, las = 1, cex.axis = 1, cex.lab = 1.5, data=realdata)
curve(m.gomp(x,coef(best.f1)[1:4]),0,max(tmpdata$t.trim),col='blue',lwd=2,add=T)
dev.off()
# attempt profiling
pf1<-profile(best.f1)
print("finished pf1", quote=F)
if(class(pf1)=="profile.mle2"){
ci1<-confint(pf1)['umax',]
} else {
ci1<-c(NA,NA)
names(ci1)<-c("2.5%","97.5%")
}
ciFI1<-confint.FI(best.f1)['umax',]
# Save coefficients of model
cfs<-coef(best.f1)
results$Curve[i] <- samples[i]
results$b0[i]<-round(cfs['b0'], 4)
results$A[i]<-round(cfs['A'], 4)
results$umax[i]<-round(cfs['umax'], 4)
results$L[i]<-round(cfs['L'], 4)
results$z[i]<-round(cfs['z'], 4)
results[i,c("umax.lw" , "umax.up" , "umax.lw.FI" , "umax.up.FI")] <- round(c(ci1,ciFI1), 4)
write.table(results[i,], file=outfile, append=T, row.names=F, col.names=F, sep=",", quote=FALSE)
# Print Operation Status
print(paste("umax for ", samples[i], " = ", results$umax[i], sep = ""), quote = F)
print(paste(round(((i)/(length(samples))*100),0),"% complete",
sep = ""), quote=F)
}
# results1<-results
# write.csv(results,"results.csv")
}
setwd("~/GitHub/Growth_Curves/data/")
growth.modGomp(input="~/GitHub/Growth_Curves/data/20210516_Bifidobacterium_48hr_96well_20210518--F_blanked.read.csv", output.dir = "~/GitHub/Growth_Curves/20210516_F/",temp.dir = "~/GitHub/Growth_Curves/20210504_strain11_curves/", output.name = "20210516_F", synergy = F, temp = F, delta=0.04)
(input="~/GitHub/Growth_Curves/data/20210516_Bifidobacterium_48hr_96well_20210524_P.medium_X5.X7.wells.swapped_X8.wells.are.X5_extra.X.wells.are.X8_blanked.read.csv", output.dir = "~/GitHub/Growth_Curves/20210516_P/",temp.dir = "~/GitHub/Growth_Curves/20210516_P", output.name = "20210516_P", synergy = F, temp = F, delta=0.04)
growth.modGomp(input="~/GitHub/Growth_Curves/data/20210516_Bifidobacterium_48hr_96well_20210524_P.medium_X5.X7.wells.swapped_X8.wells.are.X5_extra.X.wells.are.X8_blanked.read.csv", output.dir = "~/GitHub/Growth_Curves/20210516_P/", temp.dir = "~/GitHub/Growth_Curves/20210516_P/", output.name = "20210516_P", synergy = F, temp = F, delta=0.04)
growth.modGomp(input="~/GitHub/Growth_Curves/data/20210516_Bifidobacterium_48hr_96well_20210531--X_blanked.read.csv", output.dir = "~/GitHub/Growth_Curves/20210516_X/", temp.dir = "~/GitHub/Growth_Curves/20210516_X/", output.name = "20210516_X", synergy = F, temp = F, delta=0.04)
