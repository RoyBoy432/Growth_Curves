clr = function() {
ENV = globalenv()
ll = ls(envir = ENV)
ll = ll[ll != "clr"]
rm(list = ll, envir = ENV)
}
getwd()
setwd("/Users/bhbeidler/GitHub/QB2017_DivPro/Data")
package.list = c('vegan', 'tidyr', 'dplyr', 'codyn', 'ggplot2','betapart','splitstackshape','cowplot', 'MullerPlot','scales','grid','RColorBrewer','lubridate', 'reshape2', 'lubridate','multcomp','TTR', 'xtable', 'pander', 'png', 'grid', 'tseries', 'nlme', 'forecast', 'lsmeans', 'devtools')
for (package in package.list) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
install.packages(package, repos='http://cran.us.r-project.org')
library(package, character.only = TRUE) }
}
plant=read.casv("C:\\Users\\rmoge\\GitHub\\QB2017_DivPro\\Data")
plant=read.csv("C:\\Users\\rmoge\\GitHub\\QB2017_DivPro\\Data")
plant=read.csv("C:\\Users\\rmoge\\GitHub\\QB2017_DivPro\\Data\\HF_plants_treat.csv")
resp<-read.csv("C:\\Users\\rmoge\\GitHub\\QB2017_DivPro\\Data\\HF_soilresp.csv")
# Making the Site by Species Matrix for the plant data set
plant_sbys = plant[ ,6:43]
# Subsetting the data into the different years
plant_06 = (filter(plant, year == 2006))
plant_07 = (filter(plant, year == 2007))
plant_08 = (filter(plant, year == 2008))
plant_09 = (filter(plant, year == 2009))
# Separating out the treatments from the site by species matrices
plant_06_sbys = plant_06[ ,6:43]
plant_07_sbys = plant_07[ ,6:43]
plant_08_sbys = plant_08[ ,6:43]
plant_09_sbys = plant_09[ ,6:43]
# Visualizing the Plant data set
str(plant, max.level = 1)
# Calculate observed richness from time-by-species matrix
p_richness = as.data.frame(rowSums(plant[,-c(1:5)] > 0))
# Create data frame with experimental design and richness data
p_rich.all = data.frame(plant[,1:5,], p_richness)
# Rename column
names(p_rich.all)[6] = "richness"
# avg. richness per group
# stand. dev. per group
# num. obs. per group
# calc. std. err. mean.
p_rich.treat.plot = group_by(p_rich.all, treatment, year) %>%
summarise(mean = mean(richness), sd = sd(richness),n = n(),sem = sd/sqrt(n))
p_rich.plot = ggplot(p_rich.treat.plot, aes(x = year, y = mean, color = as.factor(treatment))) +
geom_point(size = 2, show.legend = T) +
geom_line(size = 0.75) +
geom_errorbar(aes(ymin = mean - sem, ymax = mean + sem), width = .1) +
scale_color_manual(values = c("#999999", "#E69F00", "#000000", "#8B7765"),name="Soil Treatment",labels=c("Unheated-Unfertilized", "Heated-Unfertilized", "Heated- Fertilized", "Unheated-Fertilized")) +
xlim(2006, 2009) + xlab("Year") + ylab("Richness") +
theme_classic(base_size=15)+
theme(axis.line.x = element_line(color = "black"), axis.line.y = element_line(color ="black"))
plot(p_rich.plot)
# Calculate diveristy from time-by-species matrix
p_diversity = diversity(plant[,-c(1:5)], "shannon")
# Create data frame with experimental design and diversity data
p_div.all = data.frame(plant[,1:5,], p_diversity)
# Rename column
names(p_div.all)[6] = "diversity"
p_div.treat.plot = group_by(p_div.all, treatment, year) %>%
summarise(mean = mean(diversity), sd = sd(diversity),n = n(),sem = sd/sqrt(n))
p_div.plot = ggplot(p_div.treat.plot, aes(x = year, y = mean, color = as.factor(treatment))) +
geom_point(size = 2, show.legend = T) +
geom_line(size = 0.75) +
geom_errorbar(aes(ymin = mean - sem, ymax = mean + sem), width = .1) +
scale_color_manual(values = c("#999999", "#E69F00", "#000000", "#8B7765"),name="Soil Treatment",labels=c("Unheated-Unfertilized", "Heated-Unfertilized", "Heated- Fertilized", "Unheated-Fertilized"))  +
xlim(2006, 2009) + xlab("Year") + ylab("Shannon's Diversity Index")+
theme_classic(base_size=15)+
theme(axis.line.x = element_line(color = "black"),axis.line.y = element_line(color = "black"))
plot(p_div.plot)
p_rich.rm = lme(richness ~ year + heat_treat + N_treat * heat_treat * N_treat * year, random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_rich.all)
summary(p_rich.rm)
anova(p_rich.rm)
# Make cleaner ANOVA table
set.caption("RMANOVA for Plant Richness Data")
pander(anova(p_rich.rm))
# Perform an RM-ANOVA and construct a F-test using the AR(1)
p_div.rm = lme(diversity ~ as.factor(year) + heat_treat + N_treat * heat_treat * N_treat * year, random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_div.all) # Look at detailed output
package.list = c('vegan', 'tidyr', 'dplyr', 'codyn', 'ggplot2','betapart','splitstackshape','cowplot', 'MullerPlot','scales','grid','RColorBrewer','lubridate', 'reshape2', 'lubridate','multcomp','TTR', 'xtable', 'pander', 'png', 'grid', 'tseries', 'nlme', 'forecast', 'lsmeans', 'devtools', 'lme4')
for (package in package.list) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
install.packages(package, repos='http://cran.us.r-project.org')
library(package, character.only = TRUE) }
}
library(lme4)
p_div.rm = lme4(diversity ~ as.factor(year) + heat_treat + N_treat * heat_treat * N_treat * year, random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_div.all)
p_div.rm = lmer(diversity ~ as.factor(year) + heat_treat + N_treat * heat_treat * N_treat * year, random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_div.all) # Look at detailed output
p_div.rm = lmer(diversity ~ as.factor(year) + heat_treat + N_treat * heat_treat * N_treat * year | plot, correlation = corAR1(form = ~ 1 | plot),data = p_div.all) # Look at detailed output
p_div.rm = lmer(diversity ~ as.factor(year) + heat_treat + N_treat * heat_treat * N_treat * year | plot, data = p_div.all) # Look at detailed output
p_div.rm = lme(diversity ~ as.factor(year) + heat_treat + N_treat + heat_treat * N_treat * year, random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_div.all) # Look at detailed output
p_div.rm = lme(diversity ~ as.factor(year) + heat_treat + N_treat + year + (heat_treat * N_treat) + (heat_treat * year) + (N_treat * year) = (heat_treat * N_treat * year), random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_div.all) # Look at detailed output
p_div.rm = lme(diversity ~ as.factor(year) + heat_treat + N_treat + year + (heat_treat * N_treat) + (heat_treat * year) + (N_treat * year) + (heat_treat * N_treat * year), random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_div.all) # Look at detailed output
p_div.rm = lme(diversity ~ as.factor(year) + (heat_treat * N_treat * year), random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_div.all) # Look at detailed output
p_div.rm = lmer(diversity ~ as.factor(year) + (heat_treat * N_treat * year), random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_div.all) # Look at detailed output
p_div.rm = lmer(diversity ~ as.factor(year) + (heat_treat * N_treat * year),data = p_div.all) # Look at detailed output
random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot)
p_div.rm = lmer(diversity ~ as.factor(year) + (heat_treat * N_treat * year), random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_div.all) # Look at detailed output
p_div.rm = lmer(diversity ~ as.factor(year) + (heat_treat * N_treat * year)+ random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_div.all) # Look at detailed output
?lmer
soil.rm1 = lme(co2flux ~ year + heat_treat + N_treat * heat_treat * N_treat * year , random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = resp)
# Making the wide site by species format into a long format- to get abundances for each species
plant$row_id = 1:nrow(plant)
p.id = dplyr::select(plant, row_id, year, treatment)
plant.m = as.matrix(plant_sbys)
m1 = setNames(melt(plant.m), c('row_id','species','count'))
m2 = dplyr::filter(m1, count > 0)
m3 = expandRows(m2, "count")
plant_long = left_join(p.id,m3, by = "row_id")
p_long = dplyr::select(plant_long, -row_id)
# Calculate species abundances for each taxonomic group
plant.sp.abunds = p_long %>%
group_by(year,treatment) %>%
count(species)
write.csv(plant.sp.abunds, file = "plant abundances")
# Calculate total turnover
plant.total = turnover(df = plant.sp.abunds, time.var = "year",
species.var = "species",
abundance.var = "n",
replicate.var = "treatment",
metric = "total")
# Calculate species gained
plant.appearance = turnover(df = plant.sp.abunds, time.var = "year",
species.var = "species",
abundance.var = "n",
replicate.var = "treatment",
metric = "appearance")
# Calculate species lost
plant.disappearance = turnover(df = plant.sp.abunds, time.var = "year",
species.var = "species",
abundance.var = "n",
replicate.var = "treatment",
metric = "disappearance")
plant.turnover = full_join(plant.total, plant.disappearance) %>%
full_join(plant.appearance)
plant.turnover = gather(plant.turnover, key = metric, value = turnover, total, appearance, disappearance)
View(plant.turnover)
# 3. Visualize turnover within each group
plant.turn.plot = ggplot(plant.turnover, aes(x = year, y = turnover, color = treatment)) +
geom_line(size = 1, show.legend = T) + facet_wrap(~metric, ncol = 1) +
xlim(2007, 2009) +
xlab("Year") +
ylab("Turnover") +
scale_color_manual(values = c("#999999", "#E69F00","#8B7765", "#000000"),name="Soil Treatment",labels=c("Unheated-Unfertilized", "Heated-Unfertilized", "Heated- Fertilized", "Unheated-Fertilized"))+
theme_bw(base_size=20)
plot(plant.turn.plot)
# Low turnover is indicative of a stable community and high turnover is indicative of a dynamic community
# Abundance Plot treatment by year
p_abun.plot1 = ggplot(plant.sp.abunds, aes(year, n, color= as.factor(treatment))) +
geom_point() +
geom_line(aes(color = as.factor(treatment))) +
facet_wrap(~species, nrow = 8) +
scale_color_manual(values = c("#999999", "#E69F00", "#000000", "#8B7765"),name="Soil Treatment",labels=c("Unheated-Unfertilized", "Heated-Unfertilized", "Heated- Fertilized", "Unheated-Fertilized"))  +
ylab("# of  Stems") +
theme_bw(base_size=15) +
theme(axis.text.x = element_text(angle=70, vjust=0.5))
plot(p_abun.plot1)
# Abundances across years
p_abun.plot2 = ggplot(plant.sp.abunds , aes(x = species, y = n)) +
geom_bar(stat = "identity") +
facet_wrap(~year, ncol = 1) +
ylab("# of  Stems") +
theme_bw(base_size=25) +
theme(axis.text.x = element_text(angle=70, vjust=0.5))
plot(p_abun.plot2)
# Calculate species abundances for each treatment group
plant.sp.abunds = p_long %>%
group_by(year,treatment) %>%
count(species)
# Calculate MRS
plant.rankshift = rank_shift(df = as.data.frame(plant.sp.abunds),
time.var = "year",
species.var = "species",
abundance.var = "n",
replicate.var = "treatment")
plant.rankshift$year = as.numeric(substr(plant.rankshift$year_pair, 6, 9))
# Create ggplot
rankshift.plot =  ggplot(plant.rankshift, aes(x = year, y = MRS, color = treatment)) + geom_line(size = 1) +
xlim(2007, 2009) +
xlab("Year") +
scale_color_manual(values = c("#999999", "#E69F00", "#8B7765", "#000000"),name="Soil Treatment",labels=c("Unheated-Unfertilized", "Heated-Unfertilized", "Heated- Fertilized", "Unheated-Fertilized"))
plot(rankshift.plot)
plant.rankshift %>%
group_by (treatment) %>%
summarise(mean = mean(MRS), cv = sd(MRS)/mean)
# Rank Clock
ag_plant.dat = aggregate(n ~ species * year * treatment,
data = subset(plant.sp.abunds,
species == "denpun" |
species == "maican" |
species == "mitrep"|
species == "gaupro"), FUN = mean)
write.csv(ag_plant.dat, file = "dominant plant abundances.csv")
rclock_plot = ggplot(ag_plant.dat, aes(year, n, color = species)) +
geom_line(size = 1) + coord_polar() + theme_bw(base_size = 25) +
facet_wrap(~treatment) +
ylab("# of Stems") +
scale_color_manual(values = c("#2F4F4F", "#FF4040", "#8FBC8F", "#C0C0C0")) +
ggtitle("Dominant species abundances \n for the different soil treatments, Harvard Forest \n")
plot(rclock_plot)
# Species Codes: Denpun = Dennstaedtia punctilobula, Gauopro = Gaultheria procumbens, maican = Maianthemum canadense, vaccpp = number of stems of Vaccinium species (corymbosum, angustifolium, vacillans)
# Soil respiration
resp = resp %>%
filter(year %in% c( "2006","2007", "2008", "2009"))
resp$date = as.Date(resp$date, format = "%m/%d/%Y")
resp$doy = yday(resp$date)
resp = na.exclude(resp)
resp_yr.plot = qplot(doy, co2flux, data = resp, geom="smooth") +
stat_smooth(fill="azure3", colour="mediumpurple4", size=1, alpha = 0.2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line =   element_line(colour = "black")) +
facet_wrap(~year, ncol = 1) +
xlab("Day of the Year") +
ylab("CO2 Flux")
resp_yr.plot + theme(text = element_text(size=18), plot.title = element_text(lineheight=.8, face="bold")) + ggtitle("Soil Respiration 2006-2009")
plot(resp_yr.plot)
resp_trt.plot = qplot(doy, co2flux, data = resp, colour = as.factor(trt), geom="smooth") +
stat_smooth(method ="auto",se = TRUE, formula = y ~ x, size = 0.5, alpha =0.2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_color_manual(values = c("#999999", "#E69F00", "#000000", "#8B7765"),name="Soil  Treatment",labels=c("Unheated-Unfertilized", "Heated-Unfertilized", "Heated- Fertilized", "Unheated-Fertilized"))  +
xlab("Day of the Year") +
ylab("Soil CO2 Eflux(mg C m-2 h-1)") +
theme(text = element_text(size=20))
plot(resp_trt.plot)
# Soil Respiration
resp.treat.mean = group_by(resp, trt) %>%
summarise(mean = mean(co2flux), sd = sd(co2flux),n = n(),sem = sd/sqrt(n))
# Trying different variance - covariance structures
# AR(1) covariance structure
soil.rm1 = lme(co2flux ~ year + heat_treat + N_treat * heat_treat * N_treat * year , random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = resp)
summary(soil.rm1) # Obtain F-test
anova(soil.rm1)
# corARMA autoregressive moving average proccess
soil.rm2 = lme(co2flux ~ year + heat_treat + N_treat * heat_treat * N_treat * year , random = ~ 1 | plot, correlation = corCompSymm(form = ~ 1 | plot),data = resp) #
summary(soil.rm2) # Obtain F-test
anova(soil.rm2)
# cirCAR1 cnt AR process
soil.rm3 = lme(co2flux ~ year + heat_treat + N_treat * heat_treat * N_treat * year , random = ~ 1 | plot, correlation = corCAR1(form = ~ 1 | plot),data = resp)
summary(soil.rm3) # Obtain F-test
anova(soil.rm3)
# corARMA autoregressive moving average process, with arbitrary components
soil.rm4 = lme(co2flux ~ year + heat_treat + N_treat * heat_treat * N_treat * year , random = ~ 1 | plot, correlation = corARMA(form = ~ 1 | plot, p = 1, q = 1),data = resp)
summary(soil.rm4) # Obtain F-test
anova(soil.rm4)
#corExp exponential spatial correlation.
soil.rm5 = lme(co2flux ~ year + heat_treat + N_treat * heat_treat * N_treat * year , random = ~ 1 | plot, correlation = corExp(form = ~ 1 | plot),data = resp)
summary(soil.rm5) # Obtain F-test
anova(soil.rm5)
# CorGaus Gaussian spatial correlation.
soil.rm6 = lme(co2flux ~ year + heat_treat + N_treat * heat_treat * N_treat * year , random = ~ 1 | plot, correlation = corGaus(form = ~ 1 | plot),data = resp)
summary(soil.rm6) # Obtain F-test
anova(soil.rm6)
# corLin	linear spatial correlation.
soil.rm7 = lme(co2flux ~ year + heat_treat + N_treat * heat_treat * N_treat * year , random = ~ 1 | plot, correlation = corLin(form = ~ 1 | plot),data = resp) #
summary(soil.rm7) # Obtain F-test
anova(soil.rm7)
# corRatio	Rational quadratics spatial correlation.
soil.rm8 = lme(co2flux ~ year + heat_treat + N_treat * heat_treat * N_treat * year , random = ~ 1 | plot, correlation = corRatio(form = ~ 1 | plot),data = resp) #
summary(soil.rm8) # Obtain F-test
anova(soil.rm8)
# corRatioSpher	spherical spatial correlation
soil.rm9 = lme(co2flux ~ year + heat_treat + N_treat * heat_treat * N_treat * year , random = ~ 1 | plot, correlation = corSpher(form = ~ 1 | plot),data = resp) #
summary(soil.rm9) # Obtain F-test
anova(soil.rm9)
# corSymm general correlation matrix, with no additional structure
soil.rm10 = lme(co2flux ~ year + heat_treat + N_treat * heat_treat * N_treat * year , random = ~ 1 | plot, correlation = corSpher(form = ~ 1 | plot),data = resp) #
summary(soil.rm10) # Obtain F-test
anova(soil.rm10)
# Compare the AICs
AIC(soil.rm1, soil.rm2, soil.rm3,soil.rm4, soil.rm5, soil.rm6,soil.rm7,soil.rm8,soil.rm9,soil.rm10)
# The unstructured covariance matrix has the lowest AIC score
p_div.rm = lme(diversity ~ (year) + (heat_treat * N_treat * year), random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_div.all) # Look at detailed output
summary(p_div.all)
anova(p_div.all)
summary(p_div.rm)
p_div.rm = lme(diversity ~ (year) + (heat_treat * N_treat * year), random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_div.all) # Look at detailed output
summary(p_rich.rm)
anova(p_rich.rm)
# Make cleaner ANOVA table
set.caption("RMANOVA for Plant Richness Data")
pander(anova(p_rich.rm))
# Perform an RM-ANOVA and construct a F-test using the AR(1)
p_div.rm = lme(diversity ~ as.factor(year) + heat_treat + N_treat * heat_treat * N_treat * year, random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_div.all) # Look at detailed output
p_div.rm = lme(diversity ~ (year) + (heat_treat * N_treat * year), random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_div.all) # Look at detailed output
p_div.rm = lme(diversity ~year + heat_treat + N_treat * heat_treat * N_treat * year, random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_div.all) # Look at detailed output
summary(p_div.rm)
anova(p_div.rm)
set.caption("RMANOVA for Plant Diversity Data")
pander(anova(p_div.rm))
p_rich.rm = lme(richness ~ year + heat_treat + N_treat * heat_treat * N_treat * year, random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_rich.all)
summary(p_rich.rm)
anova(p_rich.rm)
# Make cleaner ANOVA table
set.caption("RMANOVA for Plant Richness Data")
pander(anova(p_rich.rm))
# Perform an RM-ANOVA and construct a F-test using the AR(1)
p_div.rm = lme(diversity ~year + heat_treat + N_treat * heat_treat * N_treat * year, random = ~ 1 | plot, correlation = corAR1(form = ~ 1 | plot),data = p_div.all) # Look at detailed output
summary(p_div.rm)
anova(p_div.rm)
set.caption("RMANOVA for Plant Diversity Data")
pander(anova(p_div.rm))
devtools::install_github("rstudio/rmarkdown")
updateR()
install.packages("installR")
install.packages("installr")
updateR()
library(installR)
library(installr)
updateR()
updateR()
q()
library(installr)
install.packages("installr")
library(installr)
updateR()
install.packages("tidyverse")
library(tidyverse)
library(dplyr)
library(ggplot2)
library(gapminder)
install.packages("gapminder")
library(gapminder)
gapminder
filter(gapminder, year == 2007)
gapminder
glimpse(gapminder)
gapminder %>% filter(country == "United States")
mythingy<-gapminder %>% filter(country == "United States")
withoutNAs<-gapminder %>% filter(!is.na)
withoutNAs<-gapminder %>% filter(!is.na())
withoutNAs<-gapminder %>% filter(!is.na(gapminder))
withoutNAs<-filter(!is.na(gapminder))
gapminder %>% filter(year == 2007) %>% arrange(desc(gdpPercap)) AND arrange(desc(pop))
gapminder %>% mutate(Totalgdp = gdpPercap*pop)#and a new column gets added
tots<-gapminder %>% mutate(Totalgdp = gdpPercap*pop)#and a new column gets added
tots %>% filter(year == 2007) %>% arrange(desc(Totalgdp))
gapmind %>% mutate(mos=lifeExp*12) %>% filter(year == 2007) %>% arrange(desc(mos))
gapminder %>% mutate(mos=lifeExp*12) %>% filter(year == 2007) %>% arrange(desc(mos))
gapminder %>% mutate(mos=lifeExp*12) %>% filter(year == 2007) %>% arrange(desc(mos)) %>% glimpse(mos)
gapminder %>% mutate(mos=lifeExp*12) %>% filter(year == 2007) %>% arrange(desc(mos)) %>% glimpse()
gapminder %>% summarize(meanLifeExp = mean(lifeExp))
gapminder %>% filter(year == 2007) %>% summarize(mle=mean(lifeExp))
glimpse(gapminder %>% arrange(year))
gapminder %>% filter(year == 2007) %>% summarize(MLE = mean(lifeExp),SEpop = SE(lifeExp))
SE <- function(x){sd(x) / sqrt(length(X))
}
gapminder %>% filter(year == 2007) %>% summarize(MLE = mean(lifeExp),SEpop = SE(lifeExp))
gapminder %>% group_by(year)
SE(gapminder)
gapminder %>% group_by(year) %>% summarize(SE(lifeExp))
gapminder %>% group_by(year, continent) %>% summarize (MLE=mean(lifeExp))
gapminder %>% group_by(year, continent) %>% summarize (MLE=mean(lifeExp)) %>% glimpse
gapminder %>% group_by(year) %>% summarize(SE(lifeExp))
View(clr)
################################################################################
#                                                                              #
#	Lennon Lab Growth Curve Analysis (with Synergy MX Plate Reader)              #
#   Parameter Estimate Code                                                    #
#                                                                              #
################################################################################
#                                                                              #
#	Written by: M. Muscarella                                                    #
#   Partially based on growthcurve_code.R Written by: M. Larsen (2013/07/18)   #
#                                                                              #
#	Last update: 02/27/2016 by V. Kuo and M. Muscarella                          #
#                                                                              #
################################################################################
growth.modGomp <- function(input=" ", output.name=" ",
output.dir="../output/",
temp.dir="../temp/",
intercept.guess=0.1,delta = 0.05,
synergy=T, temp = T, smooth = T, skip = ""){
# Input = Raw txt output file from Synergy MX
# Intercept.guess = initial guess of non-grid parameter for y intercept
# delta = minimum change in OD required for analysis
# synergy=T --> the data comes from the synergy mx machine.
#   If false data should be deliminated in proper format
# temp = T -> is there temperature data include for QC purposes
# Load Code Dependencies
source("../bin/read.synergy.R")
source("../bin/curve_fit_fxs.R")
source("../bin/grid.mle2.R")
# Create Directory For Output and Temp
dir.create(output.dir, showWarnings = FALSE)
dir.create(temp.dir, showWarnings = FALSE)
# Data Input
if (synergy == T){
data.in <- read.synergy(input, skip = skip)
samples <- colnames(data.in[3:dim(data.in)[2]])
} else {
data.in <- read.csv(input, header=T)
samples <- colnames(data.in[2:dim(data.in)[2]])
}
if (temp == T){
temp.test <- lm(round(Temp, 2) ~ Time, data=data.in)
p <- round(anova(temp.test)$'Pr(>F)'[1], 3)
temp.min <- min(data.in$Temp)
temp.max <- max(data.in$Temp)
temp.diff <- temp.max - temp.min
if (temp.diff < 3) {} else {stop("Stop, check for temperature effects")}
} else {}
# Initialize Data Storage
results <- matrix(NA,nrow=length(samples),ncol=10)
colnames(results) <- c("Curve","b0","A","umax","L","z",
"umax.lw","umax.up","umax.lw.FI","umax.up.FI")
results <- as.data.frame(results)
# Temporary Directory
# outfile <- paste(temp.dir,output,".txt", sep="")
# Creat Output Directory
outfile <- paste(output.dir,output.name,".txt", sep="")
titles <- c("Curve","b0","A","umax","L","z", "umax.lw","umax.up",
"umax.lw.FI","umax.up.FI")
write.table(as.matrix(t(titles)), file=outfile, append=F, row.names=F,
col.names=F, sep=",", quote=FALSE)
for(i in 1:length(samples)){
# Print Operation Status
print(paste("Starting sample ", samples[i], sep = ""), quote=F)
# Extract Data
t <- data.in$Time
s <- data.in[,which(colnames(data.in) == samples[i])]
if (max(s) - min(s) < delta) {
plot(s ~ t, main=samples[i], ylab="ABS", xlab="Time", pch=19)
print(paste("Observed change in OD is not greater than ", delta,
" in sample ", samples[i], sep=""), quote=F)
next
} else {
realdata <- data.frame(t,s)
}
# Smoothing Function
if (smooth == T){
s.2 <- as.numeric(filter(s, rep(1/11,11), circular=F, sides=2))
s.2[1:5] <- s[1:5]
s.2[(length(s.2)-5):length(s.2)] <- s[(length(s)-5):length(s)]
s.max <- max(which(s.2 == max(s.2, na.rm=T)))
t.end <- round(t[s.max],0) + 1
t.trim <- t[which(t <= t.end)]
s.trim <- s.2[which(t <= t.end)]
tmpdata <- data.frame(t.trim, s.trim)
} else {
s.2 <- as.numeric(s)
s.2[1:5] <- s[1:5]
s.2[(length(s.2)-5):length(s.2)] <- s[(length(s)-5):length(s)]
s.max <- max(which(s.2 == max(s.2, na.rm=T)))
t.end <- round(t[s.max],0) + 1
t.trim <- t[which(t <= t.end)]
s.trim <- s.2[which(t <= t.end)]
tmpdata <- data.frame(t.trim, s.trim)
}
# Set Grid and Start Lists for Model
# Modified Gompertz, dat~dnorm(mean=m.gomp(time2,c(b0,A,umax,L)),sd=exp(z))
grids1<-list(A=c(0.01, 0.1, 0.5),umax=c(0.05,0.1,1),L=c(-5,-0.5,0.1,5,10,20),z=c(-2,-0.5))
start1<-list(b0=intercept.guess,A=max(tmpdata[,2]),umax=NA,L=NA,z=NA)
# Perform grid.mle2 Fits
fit1<-grid.mle2(minuslogl=s.trim~dnorm(mean=m.gomp(t.trim,c(b0,A,umax,L)),
sd=exp(z)),grids=grids1,start=start1,data=tmpdata,
method="BFGS")
print("finished fit", quote=F)
# isolate best of each class of model
best.f1<-fit1$res.mod[[which(fit1$res.mat[,'AIC']==min(fit1$res.mat[,'AIC']))[1]]]
# generate plot of model fits
plot(s ~ t, main=samples[i], ylab="ABS", xlab="Time", pch=19, data=realdata)
curve(m.gomp(x,coef(best.f1)[1:4]),0,max(realdata$t),col='blue',lwd=2,add=T)
pdf(file=paste(temp.dir,"testplot",samples[i],".pdf",sep=""))
par(mar = c(6, 6, 4, 2))
plot(s ~ t, main=samples[i],
ylab=expression(paste("Absorbance"[600])),
xlab=expression(paste("Time (hrs)")),
pch=19, las = 1, cex.axis = 1, cex.lab = 1.5, data=realdata)
curve(m.gomp(x,coef(best.f1)[1:4]),0,max(tmpdata$t.trim),col='blue',lwd=2,add=T)
dev.off()
# attempt profiling
pf1<-profile(best.f1)
print("finished pf1", quote=F)
if(class(pf1)=="profile.mle2"){
ci1<-confint(pf1)['umax',]
} else {
ci1<-c(NA,NA)
names(ci1)<-c("2.5%","97.5%")
}
ciFI1<-confint.FI(best.f1)['umax',]
# Save coefficients of model
cfs<-coef(best.f1)
results$Curve[i] <- samples[i]
results$b0[i]<-round(cfs['b0'], 4)
results$A[i]<-round(cfs['A'], 4)
results$umax[i]<-round(cfs['umax'], 4)
results$L[i]<-round(cfs['L'], 4)
results$z[i]<-round(cfs['z'], 4)
results[i,c("umax.lw" , "umax.up" , "umax.lw.FI" , "umax.up.FI")] <- round(c(ci1,ciFI1), 4)
write.table(results[i,], file=outfile, append=T, row.names=F, col.names=F, sep=",", quote=FALSE)
# Print Operation Status
print(paste("umax for ", samples[i], " = ", results$umax[i], sep = ""), quote = F)
print(paste(round(((i)/(length(samples))*100),0),"% complete",
sep = ""), quote=F)
}
# results1<-results
# write.csv(results,"results.csv")
}
growth.modGomp()
setwd("C:\\Users\\RZM\\GitHub\\Growth_Curves\\data")
growth.modGomp(input="20180305_n.no-1_wellplate1.csv",output.name="20180305_n.no-1_wellplate1",output.dir = "../20180305_n.no-1_wellplate1/",temp.dir = "../20180305_n.no-1_wellplate1_figures/",synergy=F,temp=F,delta=0.2)
growth.modGomp(input="20180306_n.no-1_wellplate2.csv",output.name="20180306_n.no-1_wellplate2",output.dir = "../20180306_n.no-1_wellplate2/",temp.dir = "../20180306_n.no-1_wellplate2_figures/",synergy=F,temp=F,delta=0.2)
growth.modGomp(input="20180306_n.no-1_wellplate2_trunc840.csv",output.name="20180306_n.no-1_wellplate2_trunc840",output.dir = "../20180306_n.no-1_wellplate2_trunc840/",temp.dir = "../20180306_n.no-1_wellplate2_figures_trunc840/",synergy=F,temp=F,delta=0.2)
growth.modGomp(input="20180306_rawOD.csv",output.name="20180306_rawOD_wellplate1",output.dir = "../20180306_rawOD_wellplate1/",temp.dir = "../20180306_rawOD_wellplate1/",synergy=F,temp=F,delta=0.2)
View(read.synergy)
growth.modGomp(input="20180305_rawOD.csv",output.name="20180305_rawOD_wellplate1",output.dir = "../20180305_rawOD_wellplate1/",temp.dir = "../20180305_rawOD_wellplate1_figures/",synergy=F,temp=F,delta=0.2)
growth.modGomp(input="20180310_rawOD.csv",output.name="20180310_rawOD_wellplate3",output.dir = "../20180310_rawOD_wellplate3/",temp.dir = "../20180310_rawOD_wellplate3_figures/",synergy=F,temp=F,delta=0.2)
growth.modGomp(input="20180310_rawOD_GASP.fix.csv",output.name="20180310_rawOD_GASP.fix_wellplate3",output.dir = "../20180310_rawOD_GASP.fix_wellplate3/",temp.dir = "../20180310_rawOD_GASP.fix_wellplate3_figures/",synergy=F,temp=F,delta=0.2)
growth.modGomp(input="20180310_rawOD_GASP.fix.csv",output.name="20180310_rawOD_GASP.fix_wellplate3",output.dir = "../20180310_rawOD_GASP.fix_wellplate3/",temp.dir = "../20180310_rawOD_GASP.fix_wellplate3_figures/",synergy=F,temp=F,delta=0.2)
growth.modGomp(input="20180312_wellplate4_clean_rawOD.csv",output.name="20180312_rawOD_wellplate4",output.dir = "../20180312_rawOD_wellplate4/",temp.dir = "../20180312_rawOD_wellplate4_figures/",synergy=F,temp=F,delta=0.2)
growth.modGomp(input="20180312_wellplate4_GASP.fix_840.csv",output.name="20180312_rawOD_wellplate4_GASP.fix_840",output.dir = "../20180312_rawOD_wellplate4_GASP.fix_840/",temp.dir = "../20180312_rawOD_wellplate4_figures_GASP.fix_840/",synergy=F,temp=F,delta=0.2)
growth.modGomp(input="20180312_wellplate4_GASP.fix_600.csv",output.name="20180312_rawOD_wellplate4_GASP.fix_600",output.dir = "../20180312_rawOD_wellplate4_GASP.fix_600/",temp.dir = "../20180312_rawOD_wellplate4_figures_GASP.fix_600/",synergy=F,temp=F,delta=0.2)
